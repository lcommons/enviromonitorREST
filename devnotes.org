NOTE: this file doesn't include AWS credentials, passwords, etc.

* The latest plan
** For now, this server is not interactive. Its not an app server
** a web server (lighttpd) can server a static web page 
** the python job runs every x minutes, updating the web page and writing to the database.
** store the data in AWS
*** design the database
*** create the database
** put it all on github

* Summary
a raspberry pi with an air quality sensor attached to measure and record air quality.
SDS011
This machine talks to the network via wifi

NEED a server that colllects enviromental data and sends it to the cloud.
Seperately, a server that reads data from the cloud and produces pretty graphs.

* Getting Started
** Get pi on the network
*** setup
user: xx
password: xxxxxxx
hostname: xxxxx
set language, locale, timezone
*** DONE enable SSH
*** DONE test sense hat
sudo apt-get install sense-hat
https://projects.raspberrypi.org/en/projects/getting-started-with-the-sense-hat/4
test hello world
https://hackernoon.com/how-to-measure-particulate-matter-with-a-raspberry-pi-75faa470ec35



*** DONE test air sensor
*** local air quality manager
**** TODO set up job to receive data and save to remote DB
***** DONE 1) write index.html to /var/www/html/
***** TODO 2) write data to AWS database
sensor_table
# record each different data source
 - id
 - label

data_types
# temp/humidity/pressure/ppm
|----+----------+----------------------------------------------------------------------|
| id | name     | description                                                          |
|----+----------+----------------------------------------------------------------------|
|  1 | tempf    | Temperature (fahrenheit)                                             |
|  2 | tempc    | Temperature (celsius)                                                |
|  3 | humidity | Humidity                                                             |
|  4 | pressure | Atmospheric Pressure                                                 |
|  5 | pm2.5    | Particulate matter (smaller than 2.5 microns) concentration in mg/m3 |
|  6 | pm10     | Particulate matter (smaller than 10 microns) concentration in mg/m3  |
|----+----------+----------------------------------------------------------------------|

CREATE TABLE locations
 e.g. outside, kitchen, livingroom
 - id
 - label

sensorlocations
# a sensor at a location
 - sensor_id
 - location_id
 - create_date
 - label

observation
 - id
 - timestamp
 - type
 - sensor_location
 - value

AWS Aurora serverless database
user:xxxxx
password:xgKItSCvK6Fs5DtSov7w
endpoint:database-1.cluster-cx7osshnlikw.us-east-2.rds.amazonaws.com

added inbound rule to the default security group.

Connectivity & security
Endpoint & port
Endpoint:database-1.cluster-cx7osshnlikw.us-east-2.rds.amazonaws.com
Port:3306

Networking
VPC:vpc-0fccfb67
Subnet group:default-vpc-0fccfb67
Subnets:
subnet-43702e2b
subnet-83a15ecf
subnet-c743d7bd

Security
VPC security groups
default (sg-489b9b22)
( active )

**** DONE cron job to collect local data every x minutes
$ crontab -e 

Crontab Entry	Description
*/5 * * * *	Run Crontab job at every 5 minutes

*/5 * * * *  python3 checkair.py


* enviromonitor Node app
** install mysql 
*** I created a database w/tables and data, but I think i did it w/ sudo.
*** so... add a new user to access the tables
CREATE USER xxx
  IDENTIFIED BY xxx;
GRANT ALL
  ON *.*
  TO xxx
  WITH GRANT OPTION;

CREATE USER xxx
  IDENTIFIED BY xxx;
GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
  ON environment_data.*
  TO xxx;


** install node, express, more stuff
** init
$ npx express-generator
$ npm install

** Get Node REST service onto AWS

<2019-11-21 Thu 10:39>
https://hackernoon.com/deploying-a-node-app-on-amazon-ec2-d2fb9a6757eb
Enviromonitor-env
i-04c46207ca541b643


Review
Review your choices. After you create the user, you can view and download the autogenerated password and access key.

User details
|----------------------+------------------------------------------|
| User name            | datauser                                 |
|----------------------+------------------------------------------|
| AWS access type      | Programmatic access - with an access key |
|----------------------+------------------------------------------|
| Permissions boundary | Permissions boundary is not set          |
|----------------------+------------------------------------------|

Permissions summary
The user shown above will be added to the following groups.
|-------+-------|
| Type  | Name  |
|-------+-------|
| Group | Users |
|-------+-------|


*** service endpoint
    http://52.15.42.75/ 

*** DONE Deploying an Express Application to Elastic Beanstalk
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html
 $ npm install aws-sdk
 $ git init
 $ eb init --platform node.js --region us-east-2
 $ eb open
http://enviromonitor.us-east-2.elasticbeanstalk.com/

 create .ebextensions directory and nodecommand.config
 $ git add .
 $ git commit -m "first deployment"
 $ eb deploy enviromonitor-env

errors so:
*** DONE Try a node/RDS tutorial
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/nodejs-getstarted.html
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html

$ express
$ npm install
$ git init
-copied .gitignore from earlier attempt
$ eb init --platform node.js --region us-east-2
$ eb create --sample node-express-env
$ eb open 
- copied .ebextensions from previous attempt
$ git add .
$ git commit -m "first try of second attempt"
$ eb deploy node-express-env
This works (Woo Hoo!):
http://node-express-env.quqvup2twn.us-east-2.elasticbeanstalk.com/

updates:
$ git add .ebextensions/ app.js
$ git commit -m "Serve stylesheets statically with nginx."

more updates:
$ git add .
$ git commit -m "Add observation route and template."
$ eb deploy node-express-env

(set default enviroment name)
oops, error in observation.js
$ git add .
$ git commit -m "fixed function name."
$ eb deploy
Succes!

*** DONE Get new Node app connected to database
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-nodejs.rds.html

DO THIS:
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.RDS.html

create security group:
  Security group name: dataapp-bridge
  Description: Provide access to DB instance from Elastic Beanstalk environment instances
  VPC: vpc-0fccfb67
  Group ID: sg-03fa0e49d8d749b0a 
Add the security group to the RDS instance:
  Type: MySQL/Aurora
  Protocol: TCP
  Port Range: 3306
  Source: Custom sg-03fa0e49d8d749b0a

Add the security group to the EC2 enviroment:
  Open the Elastic Beanstalk console.
  Navigate to the management page for your environment.
  Choose Configuration.
  In the Instances configuration category, choose Modify.
  Under EC2 security groups, choose the security group to attach to the instances, in addition to the instance security group that Elastic Beanstalk creates.
  Choose Apply.
  Read the warning, and then choose Confirm.

Add enviroment variables to EB instance
Environment properties
The following properties are passed in the application as environment properties. Learn more
|--------------+-------------------------------------------------------------|
| Name         | Value                                                       |
|--------------+-------------------------------------------------------------|
| RDS_DB_NAME  | environment_data                                            |
| RDS_HOSTNAME | database-1.cluster-cx7osshnlikw.us-east-2.rds.amazonaws.com |
| RDS_PASSWORD |                                                             |
| RDS_PORT     | 3306                                                        |
| RDS_USERNAME |                                                             |
|--------------+-------------------------------------------------------------|

<2019-11-22 Fri 14:57>
$ npm install mysql
added sample connection to app.js.
$ git add .
$ git commit -m "added database connection"
$ eb deploy

<2019-11-22 Fri 16:02>

UPDATE: That username didn't work, so trying 'admin'
|--------------+-------------------------------------------------------------|
| Name         | Value                                                       |
|--------------+-------------------------------------------------------------|
| RDS_DB_NAME  | environment_data                                            |
| RDS_HOSTNAME | database-1.cluster-cx7osshnlikw.us-east-2.rds.amazonaws.com |
| RDS_PASSWORD |                                                             |
| RDS_PORT     | 3306                                                        |
| RDS_USERNAME |                                                             |
|              |                                                             |
|--------------+-------------------------------------------------------------|

*** Get new working app to reproduce earlier functionality
**** DONE update observation.js to not use Jade
**** DONE update observations.js to get and list results
     copied code from earlier working version
     deploying....
     further update...
     oops... updated database config omitted db name...
     WORKED!
**** DONE Next, add POST support
     <2019-11-22 Fri 17:43>
     further changes to fix the POST function
     <2019-11-22 Fri 20:37>
     woo hoo! it works!
**** put in github

**** JSON POST
This JSON worked:
{
	"add_date": "2019-11-22T23:20:05.88Z",
	"obs_type": 6,
	"sensor": 1,
	"location": 1,
	"value": 1.2
}

Note the date format, in a string. The minute rounded to 6.000.

<2019-11-25 Mon 11:58>
it worked!




* The schematic view

|---------------------------------+------------------------+--------------|
| local host                      | remote REST service    | AWS MySql DB |
|---------------------------------+------------------------+--------------|
| python script to read sensors   | Node.js server         |              |
| - update local static html page | - return observations  |              |
| - write data to REST service    | - - return obs         |              |
|                                 | - Receive new obs POST |              |
|                                 | - - write to DB        |              |


* Fabricate temp sensor for Raspberry PI
From the Amazon page for the order
The probe adopts DS18B20 sensor chip,is made of stainless steel which is waterproof, moisture-proof and anti-rust. 
Collected temperature signal can be directly converted into a digital signal for processing by the device
Output leads connection: 
 - red (VCC), 
 - yellow (DATA), 
 - black (GND); 
 - Black-GND. 
Wide testing temperature range of -55 °c ~ +125 °c

** Using Sensehat AND GPIO pins
https://www.recantha.co.uk/blog/?p=14849

enable 1-wire on PI:
https://learn.adafruit.com/adafruits-raspberry-pi-lesson-11-ds18b20-temperature-sensing/ds18b20

enable 1-Wire
reboot

$ lsmod | grep -i w1_

<2019-11-25 Mon 19:43>
currently have ppm sensor and temp sensor working.
need mods to make sensehat and temp sensor play together

since aircheck.py now relys on airtemp.py, will update cron tab to look into the project, not run the ~/ level script.
$ crontab -e

*/5 * * * *  python3 ~/enviromonitor/checkair/checkair.py
** DONE use hi pin header to put sensehat back on
<2019-11-27 Wed 17:07>
added high header to SenseHat
connected that to Pi 
added temp sensor to that
*** DONE update script to use both temps
*** DONE create new sensor??
*** DONE Add new sensor to database sensors table
USE environment_data;
INSERT INTO sensors(label) VALUES ("temp sensor DS18B20-1");

* TODO add authentication to REST service!
** TODO HTTPS!!
*** DONE Add REST service as app.commons-faith.es
*** DONE add https endpoint
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-elb.html
add certificate to load balancer
Classic Load Balancer listener
|-------------------+-----------------+---------------------------------------------------------------|
| Listener protocol | HTTPS           | The load balancer transport protocol to use for routing.      |
| Instance port     | 80              | The port on which the instance server is listening.           |
| Instance protocol | HTTP            | The protocol to use for routing traffic to backend instances. |
| SSL certificate   | commons-fath.es |                                                               |
|-------------------+-----------------+---------------------------------------------------------------|
 
*** TODO FORCE HTTPS; 
The SSL certificate assigned to the listener.
*** DONE setload balancer to forward http to https
***** DONE Create new load balancer
migrated classic load balancer to application load balancer, then:
https://forums.aws.amazon.com/thread.jspa?messageID=870019
Hi guys,

With the new Application Load Balancers you can do this fairly trivially now...

Ensure you setup one of these at the time you setup an EB environment (still defaults to classic load balancer I believe).
Once this is done, go to your EC2 settings -> Load Balancers. Click on the load balancer you created for your EB environment. You must ensure that you have setup a HTTPS listener prior to this task so make sure you listen on HTTPS 443 with an SSL cert and forward traffic to your instances with HTTP on 80. Then add a new listener which listens on HTTP and add a default action of "Redirect to:". Make sure you set HTTPS as the protocol, 443 as the port, "Original host, path, query" as the option and finally 301 as the HTTP response code.

Once this listener is added ensure that you update your EC2 Load Balancer security group to accept both HTTPS and HTTP connections, then you're good to go!

James

** DONE Node authentication
*** Simpler: 
**** DONE just put a secret key in the header , and 
**** DONE put also in env var on local server (w/ dotenv)
**** DONE have the app test for that key, stored in an enviroment variable
**** DONE set env var on AWS
AWS Elastic Beanstalk manager | enviromonitor2 | Configuration | Modify Software
https://us-east-2.console.aws.amazon.com/elasticbeanstalk/home?region=us-east-2#/environment/configuration?applicationName=enviromonitor2&environmentId=e-jwyfmhapff
Enviroment Properties
| DEVICE_KEY | aljkhds(92@34lkj-sdf897;128H:HUW<HEHk |
|            |                                       |

**** DONE deploy app; test!
** TODO Add select options
** TODO Add DELETE operation
** DONE Add root info page
*** the theory
create a "device" model comperable to "user" database
 - id
 - name
 - description
 - token?
/devices
/adddevice


* Data Display UI
** IMPORTANT ASSUMPTION:
   The UI is only served on a secure local network
   so no authentication is needed.
** served from local raspberry pi.
  So, there are TWO web servers! 
  1) the AWS REST service that fronts the database
  2) another nodejs service that serves the UI.
** Canned data summaries
** Ad hoc / interactive 